%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G103) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1992 444
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1992 444
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.057 0.18799999 0.44499999 sc
q
559.57147 236.35262 m
447.30756 236.35262 l
435.2261 236.35262 426.38077 234.10422 420.72839 229.60022 c
415.09036 225.089 412.27856 217.94746 412.27856 208.15396 c
412.27856 200.3062 414.67328 194.41136 419.47708 190.49107 c
424.29529 186.59242 431.46506 184.63228 440.96478 184.63228 c
501.14908 184.63228 l
525.93042 184.63228 543.59235 179.9265 554.07733 170.52934 c
564.55511 161.125 569.80475 145.45108 569.80475 123.52921 c
569.80475 101.29025 563.74249 84.960548 551.65381 74.525681 c
539.54364 64.098015 520.50098 58.866173 494.53305 58.866173 c
373.55322 58.866173 l
373.55322 97.218636 l
487.32016 97.218636 l
500.26456 97.218636 509.39035 99.121124 514.69037 102.89008 c
519.98322 106.67343 522.64398 112.9358 522.64398 121.69157 c
522.64398 130.71399 520.20612 137.14931 515.35199 140.97591 c
510.505 144.79529 502.19183 146.71941 490.41962 146.71941 c
436.70752 146.71941 l
411.9118 146.71941 393.76807 151.68462 382.31226 161.62224 c
370.8349 171.55986 365.10339 187.21217 365.10339 208.65842 c
365.10339 231.56757 371.12973 248.28641 383.1824 258.85822 c
395.24948 269.41559 414.4072 274.70508 440.66995 274.70508 c
559.57147 274.70508 l
559.57147 236.35262 l
h
W*
0 0 1992 444 rc
355.10339 284.70508 m
579.80475 284.70508 l
579.80475 48.866173 l
355.10339 48.866173 l
h
f
Q
q
662.67725 93.655067 m
696.08105 93.655067 l
696.08105 217.17278 l
737.90582 217.17278 l
737.90582 63.121552 l
737.90582 42.129307 733.03009 26.60672 723.27148 16.488934 c
713.49841 6.399972 698.55487 1.3338724 678.44067 1.3338724 c
596.84778 1.3338724 l
596.84778 33.460007 l
671.29248 33.460007 l
679.2605 33.460007 685.38751 35.398529 689.67352 39.297192 c
693.94519 43.188648 696.08105 48.831257 696.08105 56.232231 c
696.08105 58.869774 l
659.32611 58.869774 l
635.69537 58.869774 618.86768 63.532314 608.82855 72.850189 c
598.76068 82.18248 593.72675 97.726685 593.72675 119.51163 c
593.72675 217.17278 l
635.11285 217.17278 l
635.11285 122.72569 l
635.11285 110.78468 636.9035 102.95853 640.44885 99.232826 c
643.9942 95.51432 651.39404 93.655067 662.67725 93.655067 c
W*
0 0 1992 444 rc
583.72675 227.17278 m
747.90582 227.17278 l
747.90582 -8.6661272 l
583.72675 -8.6661272 l
h
f
Q
q
770.73499 217.17494 m
849.2644 217.17494 l
873.00299 217.17494 889.96014 212.70697 900.09991 203.76382 c
910.2757 194.79185 915.36713 179.94667 915.36713 159.22107 c
915.36713 58.871937 l
873.53516 58.871937 l
873.53516 154.0901 l
873.53516 165.91582 871.69415 173.59062 868.04095 177.12177 c
864.37341 180.63129 857.05981 182.39685 846.04266 182.39685 c
812.56702 182.39685 l
812.56702 58.871937 l
770.73499 58.871937 l
770.73499 217.17494 l
h
W*
0 0 1992 444 rc
760.73499 227.17494 m
925.36713 227.17494 l
925.36713 48.871937 l
760.73499 48.871937 l
h
f
Q
q
1032.7024 92.756432 m
1077.1017 92.756432 l
1077.1017 58.871937 l
1020.3909 58.871937 l
1005.9938 58.871937 994.19281 60.370869 984.95917 63.332699 c
975.68951 66.323357 967.664 71.14444 960.81781 77.795944 c
953.47546 85.023964 947.72961 93.851807 943.5658 104.28667 c
939.41644 114.72154 937.34534 125.71851 937.34534 137.38567 c
937.34534 149.59331 939.40204 161.01546 943.5155 171.62328 c
947.60736 182.23109 953.37482 191.11659 960.81781 198.25813 c
967.75031 204.90244 975.89807 209.72353 985.24683 212.71417 c
994.58832 215.69041 1006.2886 217.17494 1020.3909 217.17494 c
1077.1017 217.17494 l
1077.1017 182.84364 l
1032.7024 182.84364 l
1013.0413 182.84364 999.53595 179.44223 992.10016 172.661 c
984.68585 165.86537 980.95355 154.0901 980.95355 137.29199 c
980.95355 127.61379 982.47095 119.59307 985.49847 113.27306 c
988.52606 106.93142 993.22919 101.80047 999.56476 97.901802 c
1002.693 96.028137 1006.3246 94.716576 1010.4884 93.931076 c
1014.645 93.167198 1022.0305 92.756432 1032.7024 92.756432 c
W*
0 0 1992 444 rc
927.34534 227.17494 m
1087.1017 227.17494 l
1087.1017 48.871937 l
927.34534 48.871937 l
h
f
Q
q
1114.4729 185.52155 m
1084.6648 185.52155 l
1084.6648 217.17206 l
1114.4729 217.17206 l
1114.4729 233.68192 l
1114.4729 249.79543 1117.4358 260.66269 1123.3973 266.28366 c
1129.3518 271.89746 1140.7573 274.70795 1157.6569 274.70795 c
1197.2596 274.70795 l
1197.2596 244.39062 l
1177.4547 244.39062 l
1170.3065 244.39062 1165.2222 243.25923 1162.2162 241.03966 c
1159.1599 238.80566 1157.6569 235.1232 1157.6569 229.97063 c
1157.6569 217.17206 l
1197.2596 217.17206 l
1197.2596 185.52155 l
1157.6569 185.52155 l
1157.6569 58.869053 l
1114.4729 58.869053 l
1114.4729 185.52155 l
h
W*
0 0 1992 444 rc
1074.6648 284.70795 m
1207.2596 284.70795 l
1207.2596 48.869053 l
1074.6648 48.869053 l
h
f
Q
q
1356.1968 58.869774 m
1277.4445 58.869774 l
1254.3746 58.869774 1237.6907 63.467457 1227.4431 72.634003 c
1217.1666 81.829369 1212.032 96.516014 1212.032 116.73717 c
1212.032 217.17278 l
1253.4038 217.17278 l
1253.4038 120.08815 l
1253.4038 109.51636 1255.2592 102.49012 1258.9052 98.958984 c
1262.58 95.420639 1269.8864 93.655067 1280.8315 93.655067 c
1314.3647 93.655067 l
1314.3647 217.17278 l
1356.1968 217.17278 l
1356.1968 58.869774 l
h
W*
0 0 1992 444 rc
1202.032 227.17278 m
1366.1968 227.17278 l
1366.1968 48.869774 l
1202.032 48.869774 l
h
f
Q
q
1386.8059 91.875092 m
1474.6913 91.875092 l
1482.5298 91.875092 1488.2181 93.085762 1491.7994 95.51432 c
1495.3807 97.942879 1497.1786 101.84155 1497.1786 107.1959 c
1497.1786 112.55025 1495.3663 116.46333 1491.7275 118.92792 c
1488.1104 121.39971 1482.4435 122.64642 1474.6913 122.64642 c
1438.5907 122.64642 l
1417.2756 122.64642 1402.8785 125.91813 1395.3853 132.49757 c
1387.8774 139.06981 1384.1307 150.72255 1384.1307 167.48465 c
1384.1307 184.54219 1388.6613 197.08133 1397.7008 205.13087 c
1406.769 213.16602 1420.7994 217.17278 1439.7701 217.17278 c
1529.6619 217.17278 l
1529.6619 184.16747 l
1455.7781 184.16747 l
1443.7253 184.16747 1435.9012 183.11533 1432.2767 180.98224 c
1428.6667 178.84914 1426.8473 175.06578 1426.8473 169.60333 c
1426.8473 164.66695 1428.4509 161.02051 1431.6151 158.68562 c
1434.7865 156.36517 1439.8276 155.19774 1446.681 155.19774 c
1484.5363 155.19774 l
1501.7882 155.19774 1514.9556 151.18376 1524.0382 143.14142 c
1533.1208 135.09908 1537.6514 123.48957 1537.6514 108.27686 c
1537.6514 93.655067 1533.6315 81.771713 1525.5771 72.612381 c
1517.5588 63.467457 1507.196 58.869774 1494.525 58.869774 c
1386.8059 58.869774 l
1386.8059 91.875092 l
h
W*
0 0 1992 444 rc
1374.1307 227.17278 m
1547.6514 227.17278 l
1547.6514 48.869774 l
1374.1307 48.869774 l
h
f
Q
q
1562.7924 235.01511 m
1606.3934 235.01511 l
1606.3934 274.26117 l
1562.7924 274.26117 l
1562.7924 235.01511 l
h
1562.7924 58.869053 m
1606.3934 58.869053 l
1606.3934 217.17206 l
1562.7924 217.17206 l
1562.7924 58.869053 l
h
W*
0 0 1992 444 rc
1552.7924 284.26117 m
1616.3934 284.26117 l
1616.3934 48.869053 l
1552.7924 48.869053 l
h
f
Q
q
1795.6484 137.88075 m
1795.6484 113.0547 1788.0905 93.222687 1773.0101 78.406326 c
1757.9299 63.604382 1737.5713 56.203407 1711.9773 56.203407 c
1686.3977 56.203407 1665.9816 63.625999 1650.7358 78.485596 c
1635.5046 93.33799 1627.8818 113.13397 1627.8818 137.88075 c
1627.8818 162.7068 1635.5046 182.58205 1650.7358 197.4921 c
1665.9816 212.40935 1686.3977 219.86076 1711.9773 219.86076 c
1737.3771 219.86076 1757.671 212.40935 1772.8735 197.4921 c
1788.0544 182.58205 1795.6484 162.7068 1795.6484 137.88075 c
1671.5045 137.88075 m
1671.5045 122.841 1675.0426 111.10177 1682.1117 102.6991 c
1689.1664 94.282028 1699.0114 90.095108 1711.6897 90.095108 c
1724.2529 90.095108 1734.1122 94.282028 1741.2892 102.6991 c
1748.4518 111.10177 1752.0474 122.841 1752.0474 137.88075 c
1752.0474 152.92772 1748.4949 164.63091 1741.3611 172.98312 c
1734.2345 181.34256 1724.3464 185.52226 1711.6897 185.52226 c
1699.1263 185.52226 1689.2886 181.31372 1682.1692 172.91827 c
1675.0426 164.50119 1671.5045 152.82683 1671.5045 137.88075 c
W*
0 0 1992 444 rc
1617.8818 229.86076 m
1805.6484 229.86076 l
1805.6484 46.203407 l
1617.8818 46.203407 l
h
f
Q
q
1816.2811 217.17494 m
1894.8105 217.17494 l
1918.5492 217.17494 1935.5063 212.70697 1945.6605 203.76382 c
1955.8218 194.79185 1960.9205 179.94667 1960.9205 159.22107 c
1960.9205 58.871937 l
1919.0741 58.871937 l
1919.0741 154.0901 l
1919.0741 165.91582 1917.2546 173.59062 1913.5872 177.12177 c
1909.9268 180.63129 1902.606 182.39685 1891.5889 182.39685 c
1858.106 182.39685 l
1858.106 58.871937 l
1816.2811 58.871937 l
1816.2811 217.17494 l
h
W*
0 0 1992 444 rc
1806.2811 227.17494 m
1970.9205 227.17494 l
1970.9205 48.871937 l
1806.2811 48.871937 l
h
f
Q
q
0 293.43018 m
98.240837 293.43018 l
98.240837 391.97052 l
0 391.97052 l
0 293.43018 l
h
W*
0 0 1992 444 rc
-10 401.97052 m
108.24084 401.97052 l
108.24084 283.43018 l
-10 283.43018 l
h
f
Q
0.95099998 0.58200002 0 sc
q
332.0585 302.52396 m
396.88837 378.99826 l
320.55954 444 l
255.72964 367.48965 l
332.0585 302.52396 l
h
W*
0 0 1992 444 rc
245.72964 454 m
406.88837 454 l
406.88837 292.52396 l
245.72964 292.52396 l
h
f
Q
0.057 0.18799999 0.44499999 sc
q
116.85921 293.43018 m
215.08566 293.43018 l
215.08566 391.97052 l
116.85921 391.97052 l
116.85921 293.43018 l
h
W*
0 0 1992 444 rc
106.85921 401.97052 m
225.08566 401.97052 l
225.08566 283.43018 l
106.85921 283.43018 l
h
f
Q
q
0 176.31177 m
98.240837 176.31177 l
98.240837 274.83768 l
0 274.83768 l
0 176.31177 l
h
W*
0 0 1992 444 rc
-10 284.83768 m
108.24084 284.83768 l
108.24084 166.31177 l
-10 166.31177 l
h
f
Q
q
116.85921 176.31177 m
215.08566 176.31177 l
215.08566 274.83768 l
116.85921 274.83768 l
116.85921 176.31177 l
h
W*
0 0 1992 444 rc
106.85921 284.83768 m
225.08566 284.83768 l
225.08566 166.31177 l
106.85921 166.31177 l
h
f
Q
0.95099998 0.58200002 0 sc
q
234.05641 176.31177 m
332.28287 176.31177 l
332.28287 274.83768 l
234.05641 274.83768 l
234.05641 176.31177 l
h
W*
0 0 1992 444 rc
224.05641 284.83768 m
342.28287 284.83768 l
342.28287 166.31177 l
224.05641 166.31177 l
h
f
Q
0.057 0.18799999 0.44499999 sc
q
0.15820938 59.092453 m
98.406235 59.092453 l
98.406235 157.60394 l
0.15820938 157.60394 l
0.15820938 59.092453 l
h
W*
0 0 1992 444 rc
-9.8417902 167.60394 m
108.40623 167.60394 l
108.40623 49.092453 l
-9.8417902 49.092453 l
h
f
Q
q
117.01022 59.092453 m
215.25826 59.092453 l
215.25826 157.60394 l
117.01022 157.60394 l
117.01022 59.092453 l
h
W*
0 0 1992 444 rc
107.01022 167.60394 m
225.25826 167.60394 l
225.25826 49.092453 l
107.01022 49.092453 l
h
f
Q
q
234.21461 59.092453 m
332.44107 59.092453 l
332.44107 157.60394 l
234.21461 157.60394 l
234.21461 59.092453 l
h
W*
0 0 1992 444 rc
224.21461 167.60394 m
342.44107 167.60394 l
342.44107 49.092453 l
224.21461 49.092453 l
h
f
Q
q
1990.9213 224.9946 m
1990.9213 215.25156 1983.0756 207.38937 1973.3888 207.38937 c
1963.6158 207.38937 1955.8276 215.25156 1955.8276 225.09549 c
1955.8276 234.7953 1963.7668 242.55659 1973.6477 242.55659 c
1983.0756 242.55659 1990.9213 234.53587 1990.9213 224.9946 c
1990.9213 224.9946 l
h
1962.4508 234.7953 m
1960.056 232.13615 1958.6825 228.61943 1958.6825 225.09549 c
1958.6825 216.83696 1965.1907 210.2431 1973.3888 210.2431 c
1981.4503 210.2431 1988.0663 216.87299 1988.0663 224.9946 c
1988.0663 232.95767 1981.4503 239.69566 1973.6046 239.69566 c
1969.1244 239.69566 1965.3993 238.06702 1962.4508 234.7953 c
1962.4508 234.7953 l
h
1980.6305 214.58136 m
1977.0636 214.58136 l
1971.8068 222.29221 l
1971.8068 214.58136 l
1968.9158 214.58136 l
1968.9158 234.99709 l
1972.3821 234.99709 l
1976.7616 234.99709 1979.106 232.95767 1979.106 229.18152 c
1979.106 226.1116 1977.3656 224.12263 1974.41 223.61098 c
1980.6305 214.58136 l
h
1972.7344 226.27734 m
1974.9781 226.27734 1976.1431 227.29344 1976.1431 229.23196 c
1976.1431 231.27138 1975.014 232.18658 1972.4755 232.18658 c
1971.8068 232.18658 l
1971.8068 226.27734 l
1972.7344 226.27734 l
h
W*
0 0 1992 444 rc
1945.8276 252.55659 m
2000.9213 252.55659 l
2000.9213 197.38937 l
1945.8276 197.38937 l
h
f
ep
end
%%Trailer
%%EOF
